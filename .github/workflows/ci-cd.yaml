name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Check endpoints
      run: |
        python endpoint_monitor.py fetch --output
      
  build-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/endpoint-monitor:latest,${{ secrets.DOCKER_USERNAME }}/endpoint-monitor:${{ github.sha }}
    
  # Implantação em ambiente de desenvolvimento (pode ser Minikube ou AKS Dev)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    # Opção 1: Deploy para Minikube (para testes)
    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        
    - name: Start Minikube
      run: |
        minikube start --driver=docker
        minikube addons enable storage-provisioner
    
    # Opção 2: Deploy para AKS (cluster real)
    # - name: Azure Login
    #   uses: azure/login@v1
    #   with:
    #     creds: ${{ secrets.AZURE_CREDENTIALS }}
    #
    # - name: Set AKS Context
    #   uses: azure/aks-set-context@v3
    #   with:
    #     resource-group: seu-resource-group
    #     cluster-name: seu-cluster-aks
        
    - name: Deploy using Helm
      run: |
        # Atualiza a tag da imagem para usar o SHA do commit atual
        sed -i "s/tag: latest/tag: ${{ github.sha }}/g" helm/endpoint-monitor/values.yaml
        
        # Instala/atualiza o chart Helm
        helm upgrade --install endpoint-monitor ./helm/endpoint-monitor --set replicaCount=1
        
    - name: Verify deployment
      run: |
        kubectl get pods
        helm list
        kubectl get deployment endpoint-monitor
        
  # Opcional: Implantação em ambiente de produção (com aprovação manual)
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    environment: production  # Isso requer aprovação manual no GitHub
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Set AKS Production Context
      uses: azure/aks-set-context@v3
      with:
        resource-group: seu-resource-group-prod
        cluster-name: seu-cluster-aks-prod
        
    - name: Deploy to Production
      run: |
        # Atualiza a tag da imagem para usar o SHA do commit atual
        sed -i "s/tag: latest/tag: ${{ github.sha }}/g" helm/endpoint-monitor/values.yaml
        
        # Instala/atualiza o chart Helm na produção
        helm upgrade --install endpoint-monitor ./helm/endpoint-monitor --set replicaCount=3