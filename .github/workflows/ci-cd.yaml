name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
    
    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml
    
    - name: Check endpoints
      run: |
        python endpoint_monitor.py fetch --output
      
  build-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/endpoint-monitor:latest,${{ secrets.DOCKER_USERNAME }}/endpoint-monitor:${{ github.sha }}
    
  # Implantação em ambiente de desenvolvimento (usando Minikube)
  deploy-dev:
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'latest'
    
    - name: Install Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        sudo install minikube-linux-amd64 /usr/local/bin/minikube
        
    - name: Start Minikube
      run: |
        minikube start --driver=docker
        minikube addons enable storage-provisioner
    
    - name: Deploy using Helm
      run: |
        # Atualiza a tag da imagem para usar o SHA do commit atual
        sed -i "s/tag: latest/tag: ${{ github.sha }}/g" helm/endpoint-monitor/values.yaml
        
        # Instala/atualiza o chart Helm
        helm upgrade --install endpoint-monitor ./helm/endpoint-monitor --set replicaCount=1

    - name: Wait for pod to be ready
      run: |
        echo "Waiting for endpoint-monitor pods to appear..."
        
        COUNTER=0
        MAX_TRIES=30
        SLEEP_SECONDS=10

        while [ $COUNTER -lt $MAX_TRIES ]; do
          POD_COUNT=$(kubectl get pods -l app=endpoint-monitor -o jsonpath='{.items}' | jq '. | length')

          if [ "$POD_COUNT" -gt "0" ]; then
            echo "Found endpoint-monitor pods!"
            kubectl get pods -l app=endpoint-monitor
            break
          fi

          echo "No endpoint-monitor pods found yet. Waiting $SLEEP_SECONDS seconds..."
          sleep $SLEEP_SECONDS
          COUNTER=$((COUNTER+1))
        done

        if [ $COUNTER -eq $MAX_TRIES ]; then
          echo "Timeout waiting for pods to appear"

          echo "Current pods in all namespaces:"
          kubectl get pods --all-namespaces

          echo "Current deployments:"
          kubectl get deployments

          echo "Helm releases:"
          helm list

          exit 1
        fi

        echo "Waiting for pod to become ready..."
        kubectl wait --for=condition=ready pod -l app=endpoint-monitor --timeout=300s

    - name: Verify deployment functionality
      run: |
        echo "Verifying endpoint-monitor functionality..."
        
        # Obtém o nome do pod
        POD_NAME=$(kubectl get pods -l app=endpoint-monitor -o jsonpath='{.items[0].metadata.name}')

        echo "Running endpoint monitor inside the pod..."
        kubectl exec $POD_NAME -- endpoint-monitor fetch --output

        if [ $? -eq 0 ]; then
          echo "Deployment verification successful!"
        else
          echo "Deployment verification failed!"
          kubectl logs $POD_NAME
          exit 1
        fi

    - name: Show pod logs
      run: |
        POD_NAME=$(kubectl get pods -l app.kubernetes.io/name=endpoint-monitor -o jsonpath='{.items[0].metadata.name}')
        echo "Showing logs from pod $POD_NAME:"
        kubectl logs $POD_NAME